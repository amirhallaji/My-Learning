// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package taskmanager

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//Define some common types for our service.
//Thrift ensures that different languages serialize these type definitions to appropriate
//language-specific types.
type ID int64

func IDPtr(v ID) *ID { return &v }

type Int int32

func IntPtr(v Int) *Int { return &v }

// structs are mapped by Thrift to classes or structs in your language of
// choice. This struct has two fields, an Identifier of type `id` and
// a Description of type `string`. The Identifier defaults to DEFAULT_ID.
// 
// Attributes:
//  - Identifier: A unique identifier for this task.
//  - Description: A description of the task.
type Task struct {
  Identifier ID `thrift:"Identifier,1" db:"Identifier" json:"Identifier"`
  Description string `thrift:"Description,2" db:"Description" json:"Description"`
}

func NewTask() *Task {
  return &Task{
Identifier: -1,
}
}


func (p *Task) GetIdentifier() ID {
  return p.Identifier
}

func (p *Task) GetDescription() string {
  return p.Description
}
func (p *Task) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Task)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ID(v)
  p.Identifier = temp
}
  return nil
}

func (p *Task)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *Task) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Task"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Task) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Identifier", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Identifier: ", p), err) }
  if err := oprot.WriteI64(int64(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Identifier (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Identifier: ", p), err) }
  return err
}

func (p *Task) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Description", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Description (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Description: ", p), err) }
  return err
}

func (p *Task) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Task(%+v)", *p)
}

// Exceptions inherit from language-specific base exceptions.
// 
// Attributes:
//  - Reason: @ The reason for this exception.
type TaskException struct {
  Reason string `thrift:"Reason,1" db:"Reason" json:"Reason"`
}

func NewTaskException() *TaskException {
  return &TaskException{}
}


func (p *TaskException) GetReason() string {
  return p.Reason
}
func (p *TaskException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TaskException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TaskException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Reason", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Reason: ", p), err) }
  if err := oprot.WriteString(string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Reason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Reason: ", p), err) }
  return err
}

func (p *TaskException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskException(%+v)", *p)
}

func (p *TaskException) Error() string {
  return p.String()
}

type TaskManager interface {  //A service defines the API that is exposed to clients.
  //
  //This TaskManager service has one available endpoint for creating a task.

  // @
  // Create a new task.
  // 
  // This method accepts a Task struct and returns an i64.
  // It may throw a TaskException.
  // 
  // Parameters:
  //  - Task
  Create(ctx context.Context, task *Task) (r int64, err error)
}

//A service defines the API that is exposed to clients.
//
//This TaskManager service has one available endpoint for creating a task.
type TaskManagerClient struct {
  c thrift.TClient
}

func NewTaskManagerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TaskManagerClient {
  return &TaskManagerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTaskManagerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TaskManagerClient {
  return &TaskManagerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTaskManagerClient(c thrift.TClient) *TaskManagerClient {
  return &TaskManagerClient{
    c: c,
  }
}

func (p *TaskManagerClient) Client_() thrift.TClient {
  return p.c
}
// @
// Create a new task.
// 
// This method accepts a Task struct and returns an i64.
// It may throw a TaskException.
// 
// Parameters:
//  - Task
func (p *TaskManagerClient) Create(ctx context.Context, task *Task) (r int64, err error) {
  var _args0 TaskManagerCreateArgs
  _args0.Task = task
  var _result1 TaskManagerCreateResult
  if err = p.Client_().Call(ctx, "create", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.E!= nil:
    return r, _result1.E
  }

  return _result1.GetSuccess(), nil
}

type TaskManagerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TaskManager
}

func (p *TaskManagerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TaskManagerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TaskManagerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTaskManagerProcessor(handler TaskManager) *TaskManagerProcessor {

  self2 := &TaskManagerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["create"] = &taskManagerProcessorCreate{handler:handler}
return self2
}

func (p *TaskManagerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type taskManagerProcessorCreate struct {
  handler TaskManager
}

func (p *taskManagerProcessorCreate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TaskManagerCreateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TaskManagerCreateResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.Create(ctx, args.Task); err2 != nil {
  switch v := err2.(type) {
    case *TaskException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create: " + err2.Error())
    oprot.WriteMessageBegin("create", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("create", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Task
type TaskManagerCreateArgs struct {
  Task *Task `thrift:"task,1" db:"task" json:"task"`
}

func NewTaskManagerCreateArgs() *TaskManagerCreateArgs {
  return &TaskManagerCreateArgs{}
}

var TaskManagerCreateArgs_Task_DEFAULT *Task
func (p *TaskManagerCreateArgs) GetTask() *Task {
  if !p.IsSetTask() {
    return TaskManagerCreateArgs_Task_DEFAULT
  }
return p.Task
}
func (p *TaskManagerCreateArgs) IsSetTask() bool {
  return p.Task != nil
}

func (p *TaskManagerCreateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskManagerCreateArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Task = &Task{
  Identifier: -1,
}
  if err := p.Task.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Task), err)
  }
  return nil
}

func (p *TaskManagerCreateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskManagerCreateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("task", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:task: ", p), err) }
  if err := p.Task.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Task), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:task: ", p), err) }
  return err
}

func (p *TaskManagerCreateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskManagerCreateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TaskManagerCreateResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TaskException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTaskManagerCreateResult() *TaskManagerCreateResult {
  return &TaskManagerCreateResult{}
}

var TaskManagerCreateResult_Success_DEFAULT int64
func (p *TaskManagerCreateResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TaskManagerCreateResult_Success_DEFAULT
  }
return *p.Success
}
var TaskManagerCreateResult_E_DEFAULT *TaskException
func (p *TaskManagerCreateResult) GetE() *TaskException {
  if !p.IsSetE() {
    return TaskManagerCreateResult_E_DEFAULT
  }
return p.E
}
func (p *TaskManagerCreateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TaskManagerCreateResult) IsSetE() bool {
  return p.E != nil
}

func (p *TaskManagerCreateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskManagerCreateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TaskManagerCreateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TaskException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TaskManagerCreateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskManagerCreateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TaskManagerCreateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TaskManagerCreateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskManagerCreateResult(%+v)", *p)
}


